@page "/Speeds/"
@using PracTest.Client.Services;
@using PracTest.Client.Static;
@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@implements IDisposable
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Data Entries</h3>
<a href="/Speeds/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Data Entry
</a>
<br />
<br />

@if (Tasks == null)
{
    <div class="alert alert-info">Loading Speed Values....</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Id</th>
                <th>Speed (mm/sec)</th>
                <th>Acceleration (mm/sec2)</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var task in Tasks)
            {
                <tr>
                    <td>@task.Id</td>
                    <td>@task.SpeedValue mm/sec</td>
                    <td>@task.AccelerationValue mm/sec2</td>
                    


                    <td>
                        <a href="/Speeds/view/@task.Id" class="btn btn-primary">
                            <span class="oi oi-eye"></span>
                        </a>
                        <a href="/Speeds/edit/@task.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>

                        <button class="btn btn-danger" @onclick="@(()=>Delete(task.Id))">
                            <span class="oi oi-delete"></span>
                        </button>

                    </td>
                </tr>

            }


        </tbody>



    </table>
}
@code {
    private List<Speed>? Tasks;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Tasks = await _client.GetFromJsonAsync<List<Speed>>($"{Endpoints.ColoursEndpoint}");
    }

    async Task Delete(int TaskId)
    {
        if (Tasks != null)
        {
            var task = Tasks.First(q => q.Id == TaskId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {task.Id}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ColoursEndpoint}/{TaskId}");
                await OnInitializedAsync();
            }
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

   

}
